"""
Script para testar conex√£o com MongoDB e validar estrutura das cole√ß√µes
"""
import sys
import os

# Adicionar o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'config'))

from config.database import DatabaseConfig

def test_connection():
    """Testa conex√£o e estrutura das cole√ß√µes"""
    print("üîÑ Testando conex√£o com MongoDB...")
    
    # Criar inst√¢ncia de configura√ß√£o
    db_config = DatabaseConfig()
    
    # Tentar conectar
    if not db_config.connect():
        print("‚ùå Falha na conex√£o")
        return False
    
    print("‚úÖ Conex√£o estabelecida com sucesso!")
    
    # Testar cole√ß√µes
    print("\nüìä Testando cole√ß√µes...")
    try:
        # Listar bancos de dados dispon√≠veis
        databases = db_config.client.list_database_names()
        print(f"üìÅ Bancos dispon√≠veis: {databases}")
        
        # Verificar se o banco fox existe
        fox_db = db_config.client['fox']
        print(f"üéØ Banco fox selecionado")
        
        # Listar cole√ß√µes do banco fox
        collections = fox_db.list_collection_names()
        print(f"üìã Cole√ß√µes dispon√≠veis no banco fox: {collections}")
        
        # Verificar cole√ß√µes espec√≠ficas
        target_collections = ['ticketv2', 'orderv2']
        
        for collection_name in target_collections:
            if collection_name in collections:
                collection = fox_db[collection_name]
                count = collection.count_documents({})
                print(f"‚úÖ {collection_name}: {count} documentos")
                
                # Mostrar exemplo de documento
                sample = collection.find_one()
                if sample:
                    print(f"üìÑ Exemplo de documento em {collection_name}:")
                    # Mostrar apenas as chaves principais
                    keys = list(sample.keys())[:10]  # Primeiras 10 chaves
                    print(f"   Campos: {keys}")
                else:
                    print(f"‚ö†Ô∏è  Nenhum documento encontrado em {collection_name}")
            else:
                print(f"‚ùå Cole√ß√£o {collection_name} n√£o encontrada")
        
        # Verificar subcole√ß√µes de ticketv2
        if 'ticketv2' in collections:
            print("\nüîç Verificando subcole√ß√µes de ticketv2...")
            ticketv2_collection = fox_db['ticketv2']
            
            # Tentar acessar transactions
            try:
                # No MongoDB, subcole√ß√µes s√£o acessadas como cole√ß√µes separadas
                # Vamos verificar se existem cole√ß√µes com nomes como ticketv2.transactions.destinationOrder
                all_collections = fox_db.list_collection_names()
                
                transaction_collections = [col for col in all_collections if 'transaction' in col.lower()]
                print(f"üìÅ Cole√ß√µes relacionadas a transactions: {transaction_collections}")
                
                # Procurar especificamente pelas cole√ß√µes mencionadas
                dest_collection_name = None
                origin_collection_name = None
                
                for col in all_collections:
                    if 'destination' in col.lower() and 'order' in col.lower():
                        dest_collection_name = col
                    if 'origin' in col.lower() and 'order' in col.lower():
                        origin_collection_name = col
                
                if dest_collection_name:
                    dest_count = fox_db[dest_collection_name].count_documents({})
                    print(f"üìä {dest_collection_name}: {dest_count} documentos")
                    
                    dest_sample = fox_db[dest_collection_name].find_one()
                    if dest_sample:
                        print(f"üìÑ Exemplo {dest_collection_name}:")
                        print(f"   Campos: {list(dest_sample.keys())[:10]}")
                
                if origin_collection_name:
                    origin_count = fox_db[origin_collection_name].count_documents({})
                    print(f"üìä {origin_collection_name}: {origin_count} documentos")
                    
                    origin_sample = fox_db[origin_collection_name].find_one()
                    if origin_sample:
                        print(f"üìÑ Exemplo {origin_collection_name}:")
                        print(f"   Campos: {list(origin_sample.keys())[:10]}")
                
                if not dest_collection_name and not origin_collection_name:
                    print("‚ö†Ô∏è  N√£o foram encontradas cole√ß√µes de destination/origin orders")
                    print(f"üìã Todas as cole√ß√µes: {all_collections}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao acessar subcole√ß√µes: {e}")
        
    except Exception as e:
        print(f"‚ùå Erro ao testar cole√ß√µes: {e}")
        return False
    
    # Fechar conex√£o
    db_config.close_connection()
    
    print("\n‚úÖ Teste de conex√£o conclu√≠do com sucesso!")
    return True

if __name__ == "__main__":
    test_connection()

