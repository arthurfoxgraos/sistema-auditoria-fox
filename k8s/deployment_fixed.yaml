apiVersion: apps/v1
kind: Deployment
metadata:
  name: fox-auditoria-app
  namespace: fox-auditoria
  labels:
    app: fox-auditoria
    component: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fox-auditoria
      component: web
  template:
    metadata:
      labels:
        app: fox-auditoria
        component: web
    spec:
      containers:
      - name: fox-auditoria
        image: python:3.11-slim
        imagePullPolicy: Always
        ports:
        - containerPort: 8501
          name: http
        command: ["/bin/bash"]
        args: 
        - "-c"
        - |
          pip install streamlit pandas plotly pymongo &&
          cat > app.py << 'EOF'
          import streamlit as st
          import pandas as pd
          import plotly.express as px
          from datetime import datetime, timedelta
          
          st.set_page_config(
              page_title="Sistema FOX - Auditoria",
              page_icon="🚛",
              layout="wide",
              initial_sidebar_state="expanded"
          )
          
          st.markdown("""
          <style>
              .main-header {
                  font-size: 2.5rem;
                  font-weight: bold;
                  color: #1f77b4;
                  text-align: center;
                  margin-bottom: 2rem;
              }
          </style>
          """, unsafe_allow_html=True)
          
          def main():
              st.markdown('<h1 class="main-header">🚛 Sistema FOX - Auditoria Completa</h1>', unsafe_allow_html=True)
              
              st.sidebar.title("📊 Navegação")
              
              page = st.sidebar.selectbox(
                  "Selecione uma página:",
                  [
                      "🏠 Dashboard",
                      "🚚 Cargas", 
                      "📦 Provisionamento",
                      "💰 Financeiro",
                      "📋 Contratos"
                  ]
              )
              
              if page == "🏠 Dashboard":
                  show_dashboard()
              elif page == "🚚 Cargas":
                  show_cargas_placeholder()
              elif page == "📦 Provisionamento":
                  show_provisionamento_placeholder()
              elif page == "💰 Financeiro":
                  show_financeiro_placeholder()
              elif page == "📋 Contratos":
                  show_contratos_placeholder()
          
          def show_dashboard():
              st.header("📊 Dashboard Principal")
              
              col1, col2, col3, col4 = st.columns(4)
              
              with col1:
                  st.metric("🚚 Total de Cargas", "1,234", "12 hoje")
              with col2:
                  st.metric("📦 Provisionamentos", "567", "5 pendentes")
              with col3:
                  st.metric("💰 Receita Total", "R$ 2.5M", "R$ 150K este mês")
              with col4:
                  st.metric("📋 Contratos Ativos", "89", "3 novos")
              
              st.subheader("📈 Análises")
              
              col1, col2 = st.columns(2)
              
              with col1:
                  data = {
                      'Mês': ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'],
                      'Cargas': [120, 135, 148, 162, 155, 178]
                  }
                  df = pd.DataFrame(data)
                  fig = px.bar(df, x='Mês', y='Cargas', title="Cargas por Mês")
                  st.plotly_chart(fig, use_container_width=True)
              
              with col2:
                  data = {
                      'Categoria': ['Grãos', 'Frete', 'Outros'],
                      'Valor': [1500000, 800000, 200000]
                  }
                  df = pd.DataFrame(data)
                  fig = px.pie(df, values='Valor', names='Categoria', title="Receita por Categoria")
                  st.plotly_chart(fig, use_container_width=True)
              
              st.subheader("🔧 Status do Sistema")
              
              col1, col2, col3 = st.columns(3)
              
              with col1:
                  st.success("✅ MongoDB: Conectado")
              with col2:
                  st.success("✅ Kubernetes: Online")
              with col3:
                  st.success("✅ LoadBalancer: Ativo")
              
              st.subheader("ℹ️ Informações do Sistema")
              
              info_data = {
                  'Componente': ['Namespace', 'Pod', 'Service', 'IP Externo', 'Porta'],
                  'Status': ['fox-auditoria', 'Running', 'LoadBalancer', '24.144.69.32', '80']
              }
              df_info = pd.DataFrame(info_data)
              st.dataframe(df_info, use_container_width=True)
          
          def show_cargas_placeholder():
              st.header("🚚 Gestão de Cargas")
              st.info("🔄 Módulo de cargas será implementado com conexão MongoDB completa.")
              
              data = {
                  'Ticket': ['T001', 'T002', 'T003'],
                  'Data': ['2025-01-07', '2025-01-07', '2025-01-06'],
                  'Comprador': ['CARGILL', 'ADM', 'BUNGE'],
                  'Status': ['Carregando', 'Finalizado', 'Aguardando']
              }
              df = pd.DataFrame(data)
              st.dataframe(df, use_container_width=True)
          
          def show_provisionamento_placeholder():
              st.header("📦 Gestão de Provisionamento")
              st.info("🔄 Módulo de provisionamento será implementado com conexão MongoDB completa.")
              
              data = {
                  'ID': ['P001', 'P002', 'P003'],
                  'Grão': ['Soja', 'Milho', 'Sorgo'],
                  'Quantidade': [1000, 1500, 800],
                  'Status': ['Ativo', 'Utilizado', 'Pendente']
              }
              df = pd.DataFrame(data)
              st.dataframe(df, use_container_width=True)
          
          def show_financeiro_placeholder():
              st.header("💰 Gestão Financeira")
              st.info("🔄 Módulo financeiro será implementado com conexão MongoDB completa.")
              
              data = {
                  'Data': ['2025-01-07', '2025-01-06', '2025-01-05'],
                  'Descrição': ['Recebimento Cargill', 'Pagamento Frete', 'Venda Soja'],
                  'Valor': [150000, -25000, 200000]
              }
              df = pd.DataFrame(data)
              st.dataframe(df, use_container_width=True)
          
          def show_contratos_placeholder():
              st.header("📋 Gestão de Contratos")
              st.info("🔄 Módulo de contratos será implementado com conexão MongoDB completa.")
              
              data = {
                  'ID': ['C001', 'C002', 'C003'],
                  'Cliente': ['CARGILL', 'ADM', 'BUNGE'],
                  'Grão': ['Soja', 'Milho', 'Sorgo'],
                  'Status': ['Ativo', 'Concluído', 'Pendente']
              }
              df = pd.DataFrame(data)
              st.dataframe(df, use_container_width=True)
          
          if __name__ == "__main__":
              main()
          EOF
          streamlit run app.py --server.port=8501 --server.address=0.0.0.0 --server.headless=true --server.fileWatcherType=none
        env:
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongodb-uri
        envFrom:
        - configMapRef:
            name: fox-auditoria-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 8501
          initialDelaySeconds: 300
          periodSeconds: 60
          timeoutSeconds: 15
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8501
          initialDelaySeconds: 240
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 10
        securityContext:
          runAsNonRoot: false
          allowPrivilegeEscalation: true
          readOnlyRootFilesystem: false
      restartPolicy: Always

