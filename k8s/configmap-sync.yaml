apiVersion: v1
kind: ConfigMap
metadata:
  name: fox-auditoria-sync-code
  namespace: fox-auditoria
  labels:
    app: fox-auditoria
    component: sync-job
data:
  sync_job.py: |
    #!/usr/bin/env python3
    """
    Script de sincroniza√ß√£o para CronJob do Kubernetes
    Executa a cada 5 minutos para manter dados atualizados
    """
    
    import sys
    import os
    import logging
    from datetime import datetime
    
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    def main():
        """Fun√ß√£o principal do job de sincroniza√ß√£o"""
        try:
            logger.info("üöÄ Iniciando job de sincroniza√ß√£o FOX Auditoria")
            
            # Importar m√≥dulos necess√°rios
            import pymongo
            import pandas as pd
            from datetime import datetime, timedelta
            
            logger.info("üìä Conectando ao MongoDB...")
            
            # Obter URI do MongoDB das vari√°veis de ambiente
            mongodb_uri = os.getenv('MONGODB_URI')
            if not mongodb_uri:
                logger.error("‚ùå MONGODB_URI n√£o encontrada nas vari√°veis de ambiente")
                return 1
            
            # Conectar ao MongoDB
            client = pymongo.MongoClient(mongodb_uri)
            db = client.fox
            
            logger.info("üîÑ Executando sincroniza√ß√£o de dados...")
            
            # Buscar tickets atualizados (√∫ltimos 30 dias)
            start_date = datetime.now() - timedelta(days=30)
            
            tickets_pipeline = [
                {"$match": {
                    "loadingDate": {"$gte": start_date},
                    "status": {"$ne": "Cancelado"}
                }},
                {"$lookup": {
                    "from": "users",
                    "localField": "buyer",
                    "foreignField": "_id",
                    "as": "buyer_info"
                }},
                {"$lookup": {
                    "from": "users", 
                    "localField": "seller",
                    "foreignField": "_id",
                    "as": "seller_info"
                }},
                {"$addFields": {
                    "buyer_name": {"$arrayElemAt": ["$buyer_info.name", 0]},
                    "seller_name": {"$arrayElemAt": ["$seller_info.name", 0]},
                    "provisioning_status": {
                        "$cond": {
                            "if": {"$eq": [{"$arrayElemAt": ["$transactions.provisioning", 0]}, True]},
                            "then": "‚úÖ Conforme",
                            "else": "‚ùå N√£o Conforme"
                        }
                    }
                }},
                {"$limit": 1000}
            ]
            
            tickets = list(db.ticketv2.aggregate(tickets_pipeline))
            logger.info(f"üìã Processados {len(tickets)} tickets")
            
            # Estat√≠sticas de conformidade
            conforme_count = sum(1 for t in tickets if t.get('provisioning_status') == '‚úÖ Conforme')
            nao_conforme_count = len(tickets) - conforme_count
            
            logger.info(f"   - Conformes: {conforme_count}")
            logger.info(f"   - N√£o conformes: {nao_conforme_count}")
            
            # Buscar dados de provisionamento
            provisioning = list(db.provisionings.find().limit(500))
            logger.info(f"üì¶ Processados {len(provisioning)} registros de provisionamento")
            
            # Buscar dados financeiros
            finances = list(db.finances.find().limit(500))
            logger.info(f"üí∞ Processados {len(finances)} registros financeiros")
            
            # Buscar contratos
            contracts = list(db.orderv2.find().limit(500))
            logger.info(f"üìã Processados {len(contracts)} contratos")
            
            # Fechar conex√£o
            client.close()
            
            logger.info("‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso!")
            
            # Estat√≠sticas finais
            logger.info(f"üìä Resumo da sincroniza√ß√£o:")
            logger.info(f"   - Tickets: {len(tickets)}")
            logger.info(f"   - Provisionamento: {len(provisioning)}")
            logger.info(f"   - Financeiro: {len(finances)}")
            logger.info(f"   - Contratos: {len(contracts)}")
            logger.info(f"   - Timestamp: {datetime.now().isoformat()}")
            
            return 0
            
        except ImportError as e:
            logger.error(f"‚ùå Erro de importa√ß√£o: {str(e)}")
            logger.error("Verifique se todos os m√≥dulos est√£o dispon√≠veis")
            return 1
            
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado na sincroniza√ß√£o: {str(e)}")
            return 1
    
    if __name__ == "__main__":
        exit_code = main()
        sys.exit(exit_code)
  
  requirements.txt: |
    pymongo==4.6.0
    pandas==2.1.4
    plotly==5.17.0
    streamlit==1.29.0

